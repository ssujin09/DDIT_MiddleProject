$(function () {
  // "지도보기"를 선택할 경우 해당 위치로 이동
  $(".map_view").on("click", function () {
    // 특정 위치로 이동할 요소의 ID나 클래스를 지정
    var targetElement = ".map_place";

    // 특정 위치로 스크롤을 내림 (속도를 'fast'로 설정)
    var targetPosition = $(targetElement).offset().top;

    $("html, body").animate({ scrollTop: targetPosition }, 100);
  });

  /////////////////////////////////////////////////////////////////////////////////////////////////

  // 전역 스코프에서 isLiked, isBookmarked 변수를 선언
  let isLiked = false;
  let isBookmarked = false;

  // 모든 likeBtn, bookBtn 클래스를 가진 요소를 선택
  let likeBtns = document.querySelectorAll(".likeBtn");
  let bookBtns = document.querySelectorAll(".bookBtn");

  // 각 likeBtn 요소에 대해 이벤트를 추가
  likeBtns.forEach(function (likeBtn) {
    likeBtn.addEventListener("click", function () {
      // 상태 변경
      isLiked = !isLiked;

      // 아이콘 및 배경색 변경
      updateLikeStatus(likeBtn);

      // 좋아요 상태에 따라 다른 동작 수행
      // if (isLiked) {
      //   console.log("좋아요를 눌렀습니다.");
      // } else {
      //   console.log("좋아요를 취소했습니다.");
      // }
    });
  });

  // 각 bookBtn 요소에 대해 이벤트를 추가
  bookBtns.forEach(function (bookBtn) {
    bookBtn.addEventListener("click", function () {
      // 상태 변경
      isBookmarked = !isBookmarked;

      // 아이콘 및 배경색 변경
      updateBookmarkStatus(bookBtn);

//       북마크 상태에 따라 다른 동작 수행
//       if (isBookmarked) {
//         console.log("북마크를 눌렀습니다.");
//       } else {
//         console.log("북마크를 취소했습니다.");
//       }
    });
  });

  // 아이콘 및 배경색 변경 함수
  function updateLikeStatus(likeBtn) {
    // isLiked 값에 따라 클래스 추가 또는 제거
    likeBtn.classList.toggle("active", isLiked);
  }

  function updateBookmarkStatus(bookBtn) {
    // isBookmarked 값에 따라 클래스 추가 또는 제거
    bookBtn.classList.toggle("active", isBookmarked);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////

  let isStar = false;
  let starBtns = document.querySelectorAll(".starBtn");

  starBtns.forEach(function (starBtn) {
    starBtn.addEventListener("click", function () {
      // 상태 변경
      isStar = !isStar;

      // 아이콘 및 색상 변경
      updateStarStatus(starBtn);

      // 별점 상태에 따라 다른 동작 수행
      // if (isStar) {
      //   console.log("별점을 눌렀습니다.");
      // } else {
      //   console.log("별점을 취소했습니다.");
      // }
    });
  });

  function updateStarStatus(starBtn) {
    // star-filled 클래스를 토글하여 별 아이콘의 색상을 변경
    let starIcon = starBtn.querySelector("i");
    starIcon.classList.toggle("fa-star", isStar);
    starIcon.classList.toggle("fa-star-o", !isStar);

    // 별의 색상을 변경
    starIcon.style.color = isStar ? "#5830E0" : "";

    // span의 색상을 변경
    let spanElement = starBtn.nextElementSibling;
    spanElement.style.color = isStar ? "#5830E0" : "";
  }

 /////////////////////////////////////////////////////////////////////////////////////////////////

// 더보기 버튼을 클릭할 때 toggleMore 함수 호출
 $(".more-btn").on("click", function () {
  // 연관된 more-details 엘리먼트를 찾아옴
  var moreDetails = $(this).siblings(".more-details");

  // 콘솔에 로그 출력
  console.log('Button Clicked!');

  // more-details 엘리먼트의 표시 여부를 전환
  moreDetails.toggle();

  // 버튼 텍스트 변경
  var buttonText = moreDetails.is(":visible") ? "닫기" : "더보기";
  $(this).text(buttonText);
});
});
